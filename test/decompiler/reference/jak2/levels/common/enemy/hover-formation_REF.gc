;;-*-Lisp-*-
(in-package goal)

;; definition for method 12 of type hover-formation-control
(defmethod hover-formation-control-method-12 hover-formation-control ((obj hover-formation-control))
  (let ((v1-0 (-> obj formation-type)))
    (if (or (= v1-0 2) (= v1-0 3) (zero? v1-0))
        #f
        #t
        )
    )
  )

;; definition for method 16 of type hover-formation-control
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for method 9 of type hover-formation-control
(defmethod hover-formation-control-method-9 hover-formation-control ((obj hover-formation-control) (arg0 uint))
  (set! (-> obj anchor-proc) arg0)
  0
  )

;; definition for method 13 of type hover-formation-control
;; INFO: Used lq/sq
;; ERROR: failed type prop at 13: Could not figure out load: (set! v1 (l.wu (+ v1 20)))
;; WARN: Return type mismatch none vs vector.
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
(defmethod hover-formation-control-method-13 hover-formation-control ((a0-0 hover-formation-control) (a1-0 vector))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v1-0 process)
    (v1-1 symbol)
    (v1-2 basic)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-6 none)
    (v1-8 none)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-14 none)
    (v1-15 none)
    (v1-17 none)
    (v1-18 none)
    (v1-19 none)
    (v1-20 none)
    (a0-1 (pointer process))
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-14 none)
    (a1-1 vector)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-7 none)
    (a1-8 none)
    (a3-0 none)
    (s2-0 none)
    (s2-1 none)
    (s3-0 none)
    (s4-1 none)
    (s5-0 none)
    (s5-1 none)
    (t9-0 (function process-tree event-message-block object))
    (t9-1 none)
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    )
  (with-pp
    (cond
      ((begin
         (when (begin
                 (if (begin (set! a1-1 (new 'stack-no-clear 'vector)) (set! v1-0 s6-0) v1-0)
                     (set! a0-1 (-> v1-0 ppointer))
                     )
                 (set! (-> a1-1 z) (the-as float a0-1))
                 (s.w! (+ a1-1 68) 0)
                 (set! v1-1 'path)
                 (s.w! (+ a1-1 64) v1-1)
                 (set! t9-0 send-event-function)
                 (set! v1-2 (-> a0-0 entity))
                 v1-2
                 )
           (set! v1-3 (the-as none (l.wu (+ v1-2 20))))
           (set! a0-3 (the-as none (l.wu (+ v1-3 12))))
           )
         (set! v0-0 (the-as none (call!)))
         (set! s5-0 (the-as none v0-0))
         (set! v1-4 (the-as none (-> a0-0 anchor-proc)))
         v1-4
         )
       (if (begin
             (and (begin (set! v1-5 (the-as none (l.d (+ a0-0 740)))) (set! a0-4 (the-as none (subu-s7 v1-5))) (nonzero? a0-4))
                  (begin
                    (if (begin
                          (.sllv a0-5 v1-5 r0)
                          (set! a0-6 (the-as none (l.wu a0-5)))
                          (set! a1-2 (the-as none (l.w (+ a0-6 40))))
                          (set! v1-6 (the-as none (sra v1-5 32)))
                          (= v1-6 a1-2)
                          )
                        (set! s2-0 (the-as none a0-6))
                        )
                    (set! v1-7 (the-as none s2-0))
                    )
                  )
             (set! t9-1 (the-as none type?))
             (set! a0-7 (the-as none s2-0))
             (set! a1-3 (the-as none process-focusable))
             (set! v0-1 (the-as none (call!)))
             v0-1
             )
           (set! s3-0 (the-as none s2-0))
           )
       )
      (else
        (set! s3-0 (the-as none *target*))
        )
      )
    (cond
      ((not s3-0)
       (set! v1-8 (the-as none a1-0))
       (set! a0-8 (the-as none (+ a0-0 892)))
       (set! a0-9 (the-as none (l.q a0-8)))
       (s.q! v1-8 a0-9)
       )
      (s5-0
        (set! s4-1 (the-as none s5-0))
        (set! v1-9 (the-as none (l.wu (+ s4-1 -4))))
        (set! s2-1 (the-as none (l.wu (+ v1-9 108))))
        (set! a0-10 (the-as none s3-0))
        (set! v1-10 (the-as none (l.wu (+ a0-10 -4))))
        (set! t9-2 (the-as none (l.wu (+ v1-10 96))))
        (set! a1-4 (the-as none 3))
        (call!)
        (set! a1-5 (the-as none v0-2))
        (set! t9-3 (the-as none s2-1))
        (set! a0-11 (the-as none s4-1))
        (set! v0-3 (the-as none (call!)))
        (set! v1-11 (the-as none v0-3))
        (set! f0-0 (the-as none (gpr->fpr v1-11)))
        (set! v1-12 (the-as none (l.wu (+ s5-0 -4))))
        (set! t9-4 (the-as none (l.wu (+ v1-12 72))))
        (set! a1-6 (the-as none a1-0))
        (set! a2-0 (the-as none (fpr->gpr f0-0)))
        (set! a3-0 (the-as none 'interp))
        (set! a0-12 (the-as none s5-0))
        (call!)
        (set! v1-13 (the-as none v0-4))
        (set! v1-14 (the-as none (l.wu (+ s3-0 -4))))
        (set! t9-5 (the-as none (l.wu (+ v1-14 96))))
        (set! a1-7 (the-as none 3))
        (set! a0-13 (the-as none s3-0))
        (set! v0-5 (the-as none (call!)))
        (set! v1-15 (the-as none v0-5))
        (set! f0-1 (the-as none (l.f (+ v1-15 4))))
        (s.f! (+ a1-0 4) f0-1)
        (set! v1-16 (the-as none (fpr->gpr f0-1)))
        )
      (else
        (set! s5-1 (the-as none a1-0))
        (set! a0-14 (the-as none s3-0))
        (set! v1-17 (the-as none (l.wu (+ a0-14 -4))))
        (set! t9-6 (the-as none (l.wu (+ v1-17 96))))
        (set! a1-8 (the-as none 3))
        (set! v0-6 (the-as none (call!)))
        (set! v1-18 (the-as none v0-6))
        (set! v1-19 (the-as none (l.q v1-18)))
        (s.q! s5-1 v1-19)
        (set! v1-20 (the-as none #x3f800000))
        (set! f0-2 (the-as none (gpr->fpr v1-20)))
        (s.f! (+ a1-0 12) f0-2)
        (set! v1-21 (the-as none (fpr->gpr f0-2)))
        )
      )
    (set! v0-7 (the-as none a1-0))
    (ret-value v0-7)
    )
  )

;; definition for method 14 of type hover-formation-control
;; INFO: Used lq/sq
;; ERROR: failed type prop at 15: Could not figure out load: (set! v1 (l.wu (+ v1 20)))
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
(defmethod hover-formation-control-method-14 hover-formation-control ((a0-0 hover-formation-control))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v0-9 none)
    (v0-10 none)
    (v0-11 none)
    (v0-12 none)
    (v0-13 none)
    (v0-14 none)
    (v1-0 uint)
    (v1-1 uint)
    (v1-3 process)
    (v1-4 symbol)
    (v1-5 basic)
    (v1-6 none)
    (v1-7 none)
    (v1-8 none)
    (v1-9 none)
    (v1-11 none)
    (v1-13 none)
    (v1-14 none)
    (v1-15 none)
    (v1-16 none)
    (v1-17 none)
    (v1-18 none)
    (v1-20 none)
    (v1-21 none)
    (v1-22 none)
    (v1-25 none)
    (v1-26 none)
    (v1-27 none)
    (v1-28 none)
    (v1-29 none)
    (v1-30 none)
    (a0-1 (pointer process))
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-8 none)
    (a0-9 none)
    (a0-11 none)
    (a0-12 none)
    (a0-14 none)
    (a0-16 none)
    (a0-17 none)
    (a0-18 none)
    (a0-19 none)
    (a1-0 hover-formation-control)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-7 none)
    (a1-8 none)
    (a1-9 none)
    (a1-13 none)
    (a1-14 none)
    (a2-1 none)
    (a2-4 none)
    (a3-0 none)
    (s3-0 none)
    (s3-1 none)
    (s4-0 none)
    (s4-1 none)
    (s4-2 none)
    (s4-3 none)
    (s4-4 none)
    (s5-0 none)
    (s5-1 none)
    (s5-2 none)
    (t9-0 (function process-tree event-message-block object))
    (t9-1 none)
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (t9-9 none)
    (t9-10 none)
    (t9-11 none)
    (t9-12 none)
    (t9-13 none)
    (sp-0 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    (f1-0 none)
    (f28-0 none)
    (f30-0 none)
    (f30-1 none)
    )
  (with-pp
    (when (begin (set! v1-0 (-> a0-0 flags)) (set! v1-1 (logand v1-0 4)) (zero? v1-1))
      (cond
        ((begin
           (when (begin
                   (if (begin (set! a1-0 (new 'stack-no-clear 'hover-formation-control)) (set! v1-3 s6-0) v1-3)
                       (set! a0-1 (-> v1-3 ppointer))
                       )
                   (s.w! (+ a1-0 8) a0-1)
                   (set! (-> a1-0 search-info actor-position 2 z) (the-as float 0))
                   (set! v1-4 'path)
                   (set! (-> a1-0 search-info actor-position 2 y) (the-as float v1-4))
                   (set! t9-0 send-event-function)
                   (set! v1-5 (-> a0-0 entity))
                   v1-5
                   )
             (set! v1-6 (the-as none (l.wu (+ v1-5 20))))
             (set! a0-3 (the-as none (l.wu (+ v1-6 12))))
             )
           (set! v0-0 (the-as none (call!)))
           (set! s5-0 (the-as none v0-0))
           (set! v1-7 (the-as none (-> a0-0 anchor-proc)))
           v1-7
           )
         (if (begin
               (and (begin (set! v1-8 (the-as none (l.d (+ a0-0 740)))) (set! a0-4 (the-as none (subu-s7 v1-8))) (nonzero? a0-4))
                    (begin
                      (if (begin
                            (.sllv a0-5 v1-8 r0)
                            (set! a0-6 (the-as none (l.wu a0-5)))
                            (set! a1-1 (the-as none (l.w (+ a0-6 40))))
                            (set! v1-9 (the-as none (sra v1-8 32)))
                            (= v1-9 a1-1)
                            )
                          (set! s4-0 (the-as none a0-6))
                          )
                      (set! v1-10 (the-as none s4-0))
                      )
                    )
               (set! t9-1 (the-as none type?))
               (set! a0-7 (the-as none s4-0))
               (set! a1-2 (the-as none process-focusable))
               (set! v0-1 (the-as none (call!)))
               v0-1
               )
             (set! a0-8 (the-as none s4-0))
             )
         )
        (else
          (set! a0-8 (the-as none *target*))
          )
        )
      (cond
        ((begin (and s5-0 (set! v1-11 (the-as none a0-8))) v1-11)
         (set! v1-13 (the-as none #x3f800000))
         (set! f30-0 (the-as none (gpr->fpr v1-13)))
         (set! v1-14 (the-as none #x3dcccccd))
         (set! f28-0 (the-as none (gpr->fpr v1-14)))
         (set! s4-1 (the-as none s5-0))
         (set! v1-15 (the-as none (l.wu (+ s4-1 -4))))
         (set! s3-0 (the-as none (l.wu (+ v1-15 108))))
         (set! a0-9 (the-as none a0-0))
         (set! v1-16 (the-as none (l.wu (+ a0-9 -4))))
         (set! t9-2 (the-as none (l.wu (+ v1-16 68))))
         (set! a1-3 (the-as none (+ sp-0 96)))
         (call!)
         (set! a1-4 (the-as none v0-2))
         (set! t9-3 (the-as none s3-0))
         (set! a0-10 (the-as none s4-1))
         (set! v0-3 (the-as none (call!)))
         (set! v1-17 (the-as none v0-3))
         (set! f0-0 (the-as none (gpr->fpr v1-17)))
         (set! f0-1 (the-as none (+.s f28-0 f0-0)))
         (set! f30-1 (the-as none (min.s f30-0 f0-1)))
         (set! s4-2 (the-as none (+ sp-0 112)))
         (set! a0-11 (the-as none s5-0))
         (set! v1-18 (the-as none (l.wu (+ a0-11 -4))))
         (set! t9-4 (the-as none (l.wu (+ v1-18 80))))
         (set! a1-5 (the-as none s4-2))
         (set! a2-0 (the-as none (fpr->gpr f30-1)))
         (call!)
         (set! v1-19 (the-as none v0-4))
         (set! t9-5 (the-as none forward-up-nopitch->inv-matrix))
         (set! a0-12 (the-as none (+ a0-0 908)))
         (set! a2-1 (the-as none *up-vector*))
         (set! a1-6 (the-as none s4-2))
         (call!)
         (set! s4-3 (the-as none (+ a0-0 956)))
         (set! v1-20 (the-as none (l.wu (+ s5-0 -4))))
         (set! t9-6 (the-as none (l.wu (+ v1-20 72))))
         (set! a1-7 (the-as none (+ sp-0 128)))
         (set! a2-2 (the-as none (fpr->gpr f30-1)))
         (set! a3-0 (the-as none 'interp))
         (set! a0-13 (the-as none s5-0))
         (set! v0-6 (the-as none (call!)))
         (set! v1-21 (the-as none v0-6))
         (set! v1-22 (the-as none (l.q v1-21)))
         (s.q! s4-3 v1-22)
         (set! t9-7 (the-as none matrix-inverse-of-rot-trans!))
         (set! a0-14 (the-as none (+ a0-0 972)))
         (set! a1-8 (the-as none (+ a0-0 908)))
         (call!)
         (set! v1-23 (the-as none v0-7))
         )
        (a0-8
          (set! s5-1 (the-as none quaternion-slerp!))
          (set! s4-4 (the-as none (+ a0-0 1052)))
          (set! s3-1 (the-as none (+ a0-0 1052)))
          (set! v1-25 (the-as none (l.wu (+ a0-8 -4))))
          (set! t9-8 (the-as none (l.wu (+ v1-25 100))))
          (set! a1-9 (the-as none 2))
          (call!)
          (set! a2-3 (the-as none v0-8))
          (set! v1-26 (the-as none #x3f4ccccd))
          (set! f0-2 (the-as none (gpr->fpr v1-26)))
          (set! v1-27 (the-as none (l.wu (+ s6-0 8))))
          (set! f1-0 (the-as none (l.f (+ v1-27 76))))
          (set! f0-3 (the-as none (*.s f0-2 f1-0)))
          (set! a3-1 (the-as none (fpr->gpr f0-3)))
          (set! t9-9 (the-as none s5-1))
          (set! a0-15 (the-as none s4-4))
          (set! a1-10 (the-as none s3-1))
          (call!)
          (set! a1-11 (the-as none v0-9))
          (set! t9-10 (the-as none vector-z-quaternion!))
          (set! a0-16 (the-as none (+ sp-0 144)))
          (call!)
          (set! a1-12 (the-as none v0-10))
          (set! t9-11 (the-as none forward-up-nopitch->inv-matrix))
          (set! a0-17 (the-as none (+ a0-0 908)))
          (set! a2-4 (the-as none *up-vector*))
          (call!)
          (set! s5-2 (the-as none (+ a0-0 956)))
          (set! a0-18 (the-as none a0-0))
          (set! v1-28 (the-as none (l.wu (+ a0-18 -4))))
          (set! t9-12 (the-as none (l.wu (+ v1-28 68))))
          (set! a1-13 (the-as none (+ sp-0 160)))
          (set! v0-12 (the-as none (call!)))
          (set! v1-29 (the-as none v0-12))
          (set! v1-30 (the-as none (l.q v1-29)))
          (s.q! s5-2 v1-30)
          (set! t9-13 (the-as none matrix-inverse-of-rot-trans!))
          (set! a0-19 (the-as none (+ a0-0 972)))
          (set! a1-14 (the-as none (+ a0-0 908)))
          (call!)
          (set! v1-31 (the-as none v0-13))
          )
        )
      )
    (set! v0-14 (the-as none 0))
    (ret-none)
    )
  )

;; definition for method 15 of type hover-formation-control
(defmethod hover-formation-control-method-15 hover-formation-control ((obj hover-formation-control) (arg0 vector) (arg1 vector))
  (vector-matrix*!
    arg0
    (hover-formation-control-method-13 obj (new 'stack-no-clear 'vector))
    (-> obj world-to-zone)
    )
  (vector+! arg0 arg0 arg1)
  (vector-matrix*! arg0 arg0 (-> obj zone-to-world))
  )

;; definition for function odd?
(defun odd? ((arg0 int))
  (= (logand arg0 1) 1)
  )

;; definition for function even?
(defun even? ((arg0 int))
  (not (odd? arg0))
  )

;; definition of type gen-perms-context
(deftype gen-perms-context (structure)
  ((num           int32   :offset-assert   0)
   (table         uint32  :offset-assert   4)
   (iterate-count int32   :offset-assert   8)
   )
  :method-count-assert 9
  :size-assert         #xc
  :flag-assert         #x90000000c
  )

;; definition for method 3 of type gen-perms-context
(defmethod inspect gen-perms-context ((obj gen-perms-context))
  (when (not obj)
    (set! obj obj)
    (goto cfg-4)
    )
  (format #t "[~8x] ~A~%" obj 'gen-perms-context)
  (format #t "~1Tnum: ~D~%" (-> obj num))
  (format #t "~1Ttable: #x~X~%" (-> obj table))
  (format #t "~1Titerate-count: ~D~%" (-> obj iterate-count))
  (label cfg-4)
  obj
  )

;; definition for function gen-perms
;; INFO: Used lq/sq
(defun gen-perms ((arg0 int)
         (arg1 (function hover-formation hover-formation hover-formation none))
         (arg2 (function vector object))
         (arg3 object)
         )
  (local-vars (sv-80 int))
  (let ((s2-0 (new 'stack-no-clear 'gen-perms-context)))
    (dotimes (v1-0 arg0)
      (set! (-> (the-as (pointer int32) (+ (the-as uint s2-0) (* v1-0 4)))) 0)
      )
    (arg2 (the-as vector arg3))
    (let ((s1-0 1))
      (while (< s1-0 arg0)
        (cond
          ((>= (-> (the-as (pointer int32) (+ (the-as uint s2-0) (* s1-0 4)))) s1-0)
           (set! (-> (the-as (pointer int32) (+ (the-as uint s2-0) (* s1-0 4)))) 0)
           0
           )
          (else
            (let ((s0-0 arg1))
              (set! sv-80 s1-0)
              (let ((a1-1 (if (odd? s1-0)
                              (-> (the-as (pointer int32) (+ (the-as uint s2-0) (* s1-0 4))))
                              0
                              )
                          )
                    (a2-1 arg3)
                    )
                (s0-0 (the-as hover-formation sv-80) (the-as hover-formation a1-1) (the-as hover-formation a2-1))
                )
              )
            (+! (-> (the-as (pointer int32) (+ (the-as uint s2-0) (* s1-0 4)))) 1)
            (arg2 (the-as vector arg3))
            (set! s1-0 0)
            )
          )
        (+! s1-0 1)
        )
      )
    )
  #f
  )

;; definition for function test-gen-perms
(defun test-gen-perms ((arg0 int))
  (let ((gp-0 (new 'stack-no-clear 'gen-perms-context))
        (s4-0 (new 'stack 'gen-perms-context))
        )
    (dotimes (v1-1 arg0)
      (set! (-> (the-as (pointer int32) (+ (the-as uint gp-0) (* v1-1 4)))) v1-1)
      )
    (set! (-> s4-0 num) arg0)
    (set! (-> s4-0 table) (the-as uint gp-0))
    (set! (-> s4-0 iterate-count) 0)
    (gen-perms
      arg0
      (the-as (function hover-formation hover-formation hover-formation none) L116)
      (lambda ((arg0 vector))
        (format #t "(")
        (dotimes (s5-0 (the-as int (-> arg0 x)))
          (format #t "~d " (-> (the-as (pointer int32) (+ (the-as uint (-> arg0 y)) (* s5-0 4)))))
          )
        (format #t ")~%")
        )
      s4-0
      )
    (format #t "iterate-count: ~d~%" (-> s4-0 iterate-count))
    )
  )

;; definition for method 10 of type hover-formation-control
;; ERROR: function was not converted to expressions. Cannot decompile.

;; definition for method 11 of type hover-formation-control
;; INFO: Used lq/sq
;; ERROR: failed type prop at 229: Could not figure out load: (set! a2 (l.wu a0))
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
;; ERROR: Unsupported inline assembly instruction kind - [sllv a0, v1, r0]
(defmethod hover-formation-control-method-11 hover-formation-control ((a0-0 hover-formation-control))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 vector)
    (v0-6 none)
    (v0-7 symbol)
    (v0-8 none)
    (v0-9 int)
    (v1-0 hover-formation-control)
    (v1-1 int)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-7 none)
    (v1-8 none)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (v1-14 none)
    (v1-15 none)
    (v1-16 none)
    (v1-18 none)
    (v1-19 none)
    (v1-20 none)
    (v1-21 none)
    (v1-24 int)
    (v1-25 int)
    (v1-26 type)
    (v1-27 none)
    (v1-29 uint)
    (v1-30 uint)
    (v1-32 none)
    (v1-33 none)
    (v1-35 none)
    (v1-36 none)
    (v1-38 none)
    (v1-39 none)
    (v1-41 none)
    (v1-42 none)
    (v1-44 symbol)
    (v1-45 int)
    (v1-48 int)
    (v1-49 int)
    (v1-51 uint)
    (v1-52 int)
    (v1-53 int)
    (v1-54 int)
    (v1-55 int)
    (v1-58 none)
    (v1-59 none)
    (v1-60 none)
    (v1-61 none)
    (v1-63 int)
    (v1-66 int)
    (v1-69 int)
    (v1-70 int)
    (v1-71 uint)
    (v1-72 none)
    (a0-1 int)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-8 none)
    (a0-9 none)
    (a0-10 none)
    (a0-11 hover-formation-control)
    (a0-12 int)
    (a0-13 none)
    (a0-14 none)
    (a0-15 none)
    (a0-16 none)
    (a0-17 none)
    (a0-18 none)
    (a0-19 none)
    (a0-20 none)
    (a0-21 none)
    (a0-22 none)
    (a0-23 symbol)
    (a0-24 int)
    (a0-25 uint)
    (a0-26 none)
    (a0-27 int)
    (a0-28 int)
    (a0-30 process)
    (a0-31 int)
    (a0-32 symbol)
    (a0-33 uint)
    (a0-34 uint)
    (a0-35 int)
    (a0-37 int)
    (a0-38 none)
    (a0-39 none)
    (a1-0 none)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-8 vector)
    (a1-9 none)
    (a1-10 (function uint uint hover-formation-control uint))
    (a1-11 hover-formation-control)
    (a2-0 vector)
    (a2-1 none)
    (a2-2 none)
    (a2-3 int)
    (a2-4 none)
    (a2-5 none)
    (a2-6 (function vector none))
    (a2-7 (pointer process))
    (a2-8 int)
    (a2-9 int)
    (a2-10 uint)
    (a2-11 uint)
    (a2-12 none)
    (a3-0 float)
    (a3-3 form-search-info)
    (s1-0 int)
    (s2-0 none)
    (s3-0 none)
    (s3-1 none)
    (s3-2 int)
    (s3-3 int)
    (s3-4 int)
    (s4-0 int)
    (s4-1 int)
    (s4-2 int)
    (s4-3 int)
    (s5-0 form-search-info)
    (t9-0 none)
    (t9-1 none)
    (t9-2 (function hover-formation-control vector vector float none))
    (t9-3 none)
    (t9-4 none)
    (t9-5 (function vector vector float vector))
    (t9-6 none)
    (t9-7
      (function int (function hover-formation hover-formation hover-formation none) (function vector object) object symbol)
      )
    (t9-8 (function process-tree event-message-block object))
    (f0-0 float)
    (f0-1 float)
    (f0-2 float)
    (f0-3 int)
    (f0-4 none)
    (f0-5 int)
    (f0-6 float)
    (f0-7 float)
    (f0-8 float)
    (f28-0 float)
    (f28-1 number)
    (f30-0 float)
    )
  (with-pp
    (set! s5-0 (-> a0-0 search-info))
    (set! (-> s5-0 form) a0-0)
    (set! v1-0 (new 'stack-no-clear 'hover-formation-control))
    (set! a0-1 0)
    (while (<.si a0-1 16)
      (set! a1-0 (the-as none (sll a0-1 4)))
      (set! a1-1 (the-as none (+ v1-0 a1-0)))
      (s.q! a1-1 0)
      (set! a0-1 (the-as int (+ a0-1 1)))
      )
    (set! (-> s5-0 pos-table) (the-as uint v1-0))
    (set! v1-1 -1082130432)
    (set! f0-0 (the-as float (gpr->fpr v1-1)))
    (set! (-> s5-0 best-cost) f0-0)
    (set! (-> s5-0 count) 0)
    (set! s4-0 0)
    (while (<.si s4-0 16)
      (if (begin
            (and (begin
                   (set! v1-2 (the-as none (sll s4-0 3)))
                   (set! v1-3 (the-as none (+ v1-2 a0-0)))
                   (set! v1-4 (the-as none (l.d (+ v1-3 748))))
                   (set! a0-4 (the-as none (subu-s7 v1-4)))
                   (nonzero? a0-4)
                   )
                 (begin
                   (if (begin
                         (.sllv a0-5 v1-4 r0)
                         (set! a0-6 (the-as none (l.wu a0-5)))
                         (set! a1-2 (the-as none (l.w (+ a0-6 40))))
                         (set! v1-5 (the-as none (sra v1-4 32)))
                         (= v1-5 a1-2)
                         )
                       (set! s3-0 (the-as none a0-6))
                       )
                   (set! v1-6 (the-as none s3-0))
                   )
                 )
            (set! t9-0 (the-as none type?))
            (set! a0-7 (the-as none s3-0))
            (set! a1-3 (the-as none process-focusable))
            (set! v0-0 (the-as none (call!)))
            v0-0
            )
          (set! a0-8 (the-as none s3-0))
          )
      (cond
        (a0-8
          (set! v1-7 (the-as none (sll s4-0 4)))
          (set! v1-8 (the-as none (+ v1-7 16)))
          (set! s3-1 (the-as none (+ v1-8 s5-0)))
          (set! v1-9 (the-as none (l.wu (+ a0-8 -4))))
          (set! t9-1 (the-as none (l.wu (+ v1-9 96))))
          (set! a1-4 (the-as none 3))
          (set! v0-1 (the-as none (call!)))
          (set! v1-10 (the-as none v0-1))
          (set! v1-11 (the-as none (l.q v1-10)))
          (s.q! s3-1 v1-11)
          (set! v1-12 (the-as none #t))
          (set! a0-9 (the-as none (sll s4-0 2)))
          (set! a0-10 (the-as none (+ a0-9 s5-0)))
          (s.w! (+ a0-10 272) v1-12)
          (set! v1-13 (the-as none (l.w (+ s5-0 4))))
          (set! v1-14 (the-as none (+ v1-13 1)))
          (s.w! (+ s5-0 4) v1-14)
          )
        (else
          (set! v1-15 (the-as none (sll s4-0 2)))
          (set! v1-16 (the-as none (+ v1-15 s5-0)))
          (s.w! (+ v1-16 272) #f)
          )
        )
      (set! v1-18 (the-as none (sll s4-0 2)))
      (set! v1-19 (the-as none (+ v1-18 s5-0)))
      (s.w! (+ v1-19 336) s4-0)
      (set! v1-20 (the-as none (sll s4-0 2)))
      (set! v1-21 (the-as none (+ v1-20 s5-0)))
      (s.w! (+ v1-21 656) s4-0)
      (set! s4-0 (the-as int (+ s4-0 1)))
      )
    (when (begin
            (set! f30-0 (-> a0-0 rotation-inc))
            (set! f28-0 f30-0)
            (set! v1-24 #x47800000)
            (set! f0-1 (the-as float (gpr->fpr v1-24)))
            (set! f0-2 (/.s f0-1 f30-0))
            (set! f0-3 (f2i f0-2))
            (set! v1-25 (fpr->gpr f0-3))
            (set! s3-2 (+ v1-25 1))
            (set! s4-1 0)
            (set! s2-0 (the-as none (new 'stack-no-clear 'vector)))
            (set! a0-11 a0-0)
            (set! v1-26 (-> a0-11 type))
            (set! t9-2 (method-of-type v1-26 hover-formation-control-method-10))
            (set! a1-5 (the-as none s2-0))
            (set! a2-0 (-> a0-0 offset))
            (set! a3-0 (the-as float 0))
            (set! v0-2 (call! a0-11 a1-5 a2-0 a3-0))
            (set! v1-27 v0-2)
            v1-27
            )
      (set! v1-29 (-> s5-0 pos-table))
      (set! a0-12 (sll s4-1 4))
      (set! v1-30 (+ v1-29 a0-12))
      (set! a0-13 (the-as none s2-0))
      (set! a0-14 (the-as none (l.q a0-13)))
      (s.q! v1-30 a0-14)
      (set! s4-1 (+ s4-1 1))
      (set! v1-31 s4-1)
      )
    (set! s1-0 0)
    (while (begin
             (or (begin (set! a0-23 (>=.si s1-0 s3-2)) a0-23)
                 (begin (set! v1-45 (-> s5-0 count)) (set! v1-44 (>=.si s4-1 v1-45)))
                 )
             (not v1-44)
             )
      (when (begin
              (when (begin
                      (set! a0-15 (the-as none a0-0))
                      (set! v1-32 (the-as none (l.wu (+ a0-15 -4))))
                      (set! t9-3 (the-as none (l.wu (+ v1-32 56))))
                      (set! a1-6 (the-as none s2-0))
                      (set! a2-1 (the-as none (-> a0-0 offset)))
                      (set! a3-1 (the-as none (fpr->gpr f28-0)))
                      (set! v0-3 (the-as none (call!)))
                      (set! v1-33 (the-as none v0-3))
                      v1-33
                      )
                (set! v1-35 (the-as none (l.wu (+ s5-0 8))))
                (set! a0-16 (the-as none (sll s4-1 4)))
                (set! v1-36 (the-as none (+ v1-35 a0-16)))
                (set! a0-17 (the-as none s2-0))
                (set! a0-18 (the-as none (l.q a0-17)))
                (s.q! v1-36 a0-18)
                (set! s4-1 (the-as int (+ s4-1 1)))
                (set! v1-37 (the-as none s4-1))
                )
              (set! a0-19 (the-as none a0-0))
              (set! v1-38 (the-as none (l.wu (+ a0-19 -4))))
              (set! t9-4 (the-as none (l.wu (+ v1-38 56))))
              (set! a1-7 (the-as none s2-0))
              (set! a2-2 (the-as none (+ a0-0 1036)))
              (set! f0-4 (the-as none (neg.s f28-0)))
              (set! a3-2 (the-as none (fpr->gpr f0-4)))
              (set! v0-4 (the-as none (call!)))
              (set! v1-39 (the-as none v0-4))
              v1-39
              )
        (set! v1-41 (the-as none (l.wu (+ s5-0 8))))
        (set! a0-20 (the-as none (sll s4-1 4)))
        (set! v1-42 (the-as none (+ v1-41 a0-20)))
        (set! a0-21 (the-as none s2-0))
        (set! a0-22 (the-as none (l.q a0-21)))
        (s.q! v1-42 a0-22)
        (set! s4-1 (the-as int (+ s4-1 1)))
        (set! v1-43 (the-as none s4-1))
        )
      (set! f28-0 (the-as float (+.s f28-0 f30-0)))
      (set! s1-0 (the-as int (+ s1-0 1)))
      )
    (when (begin
            (when (begin (set! v1-48 (-> s5-0 count)) (set! v1-49 (- v1-48 s4-1)) (>0.si v1-49))
              (set! f28-1 0)
              (set! s3-3 0)
              (while (begin (set! v1-54 (-> s5-0 count)) (set! v1-55 (- v1-54 s4-1)) (<.si s3-3 v1-55))
                (set! t9-5 vector-rotate-y!)
                (set! v1-51 (-> s5-0 pos-table))
                (set! a0-24 (sll s3-3 4))
                (set! a0-25 (+ v1-51 a0-24))
                (set! a1-8 (-> a0-0 offset))
                (set! a2-3 (fpr->gpr f28-1))
                (call! a0-25 a1-8 a2-3)
                (set! v1-52 (+ s3-3 1))
                (set! f0-5 (gpr->fpr v1-52))
                (set! f0-6 (i2f f0-5))
                (set! f0-7 (*.s f0-6 f30-0))
                (set! f28-1 (+.s f28-1 f0-7))
                (set! v1-53 -1082130432)
                (set! f0-8 (the-as float (gpr->fpr v1-53)))
                (set! f30-0 (*.s f0-8 f30-0))
                (set! s3-3 (+ s3-3 1))
                )
              )
            (set! s4-2 0)
            (while (begin (set! v1-63 (-> s5-0 count)) (<.si s4-2 v1-63))
              (set! a0-26 (the-as none a0-0))
              (set! v1-58 (the-as none (l.wu (+ a0-26 -4))))
              (set! t9-6 (the-as none (l.wu (+ v1-58 76))))
              (set! v1-59 (the-as none (sll s4-2 4)))
              (set! v1-60 (the-as none (+ v1-59 400)))
              (set! a1-9 (the-as none (+ v1-60 s5-0)))
              (set! v1-61 (the-as none (-> s5-0 pos-table)))
              (set! a2-4 (the-as none (sll s4-2 4)))
              (set! a2-5 (the-as none (+ v1-61 a2-4)))
              (call!)
              (set! v1-62 (the-as none v0-6))
              (set! s4-2 (the-as int (+ s4-2 1)))
              )
            (set! v1-66 1)
            (set! a0-27 (-> s5-0 count))
            (<.si v1-66 a0-27)
            )
      (set! t9-7 gen-perms)
      (set! a0-28 (-> s5-0 count))
      (set! a1-10 (lambda ((arg0 uint) (arg1 uint) (arg2 hover-formation-control))
                    (let ((v0-0 (l.wu (+ (* arg0 4) (the-as uint arg2) 336))))
                      (let ((v1-4 (l.wu (+ (* arg1 4) (the-as uint arg2) 336)))
                            (a0-2 (+ (* arg0 4) (the-as uint arg2)))
                            )
                        (s.w! (+ a0-2 336) v1-4)
                        )
                      (let ((v1-6 (+ (* arg1 4) (the-as uint arg2))))
                        (s.w! (+ v1-6 336) v0-0)
                        )
                      v0-0
                      )
                    )
            )
      (set! a2-6 L86)
      (set! a3-3 s5-0)
      (call! a0-28 a1-10 a2-6 a3-3)
      (set! v1-68 v0-7)
      )
    (set! s4-3 0)
    (set! s3-4 0)
    (while (<.si s3-4 16)
      (when (begin
              (set! v1-69 (sll s3-4 3))
              (set! v1-70 (+ v1-69 a0-0))
              (set! v1-71 (dynamic-array-field-access v1-70 actor-table PLACEHOLDER))
              v1-71
              )
        (and (begin
               (if (begin (set! a1-11 (new 'stack-no-clear 'hover-formation-control)) (set! a0-30 s6-0) a0-30)
                   (set! a2-7 (-> a0-30 ppointer))
                   )
               (s.w! (+ a1-11 8) a2-7)
               (set! a0-31 1)
               (set! (-> a1-11 search-info actor-position 2 z) (the-as float a0-31))
               (set! a0-32 'update-formation)
               (set! (-> a1-11 search-info actor-position 2 y) (the-as float a0-32))
               (set! a0-33 (-> s5-0 pos-table))
               (set! a2-8 (sll s4-3 2))
               (set! a2-9 (+ a2-8 s5-0))
               (set! a2-10 (dynamic-array-field-access a2-9 best-mapping PLACEHOLDER))
               (set! a2-11 (sll a2-10 4))
               (set! a0-34 (+ a0-33 a2-11))
               (s.d! (+ a1-11 16) a0-34)
               (set! t9-8 send-event-function)
               (set! a0-35 (subu-s7 v1-71))
               (nonzero? a0-35)
               )
             (begin
               (if (begin
                     (.sllv a0-37 v1-71 r0)
                     (set! a2-12 (the-as none (l.wu a0-37)))
                     (set! a0-38 (the-as none (l.w (+ a2-12 40))))
                     (set! v1-72 (the-as none (sra v1-71 32)))
                     (= v1-72 a0-38)
                     )
                   (set! a0-39 (the-as none a2-12))
                   )
               (set! v1-73 (the-as none a0-39))
               )
             )
        (call!)
        (set! v1-74 (the-as none v0-8))
        (set! s4-3 (the-as int (+ s4-3 1)))
        (set! a0-40 (the-as none s4-3))
        )
      (set! s3-4 (the-as int (+ s3-4 1)))
      )
    (set! v0-9 0)
    (ret-value v0-9)
    )
  )

;; definition for method 17 of type hover-formation-control
;; ERROR: failed type prop at 1: Could not figure out load: (set! v1 (l.wu (+ a1 24)))
;; ERROR: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
(defmethod hover-formation-control-method-17 hover-formation-control ((a0-0 hover-formation-control) (a1-0 hover-formation-control))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v0-2 none)
    (v1-0 symbol)
    (v1-1 none)
    (v1-2 none)
    (v1-3 none)
    (a0-1 none)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-6 none)
    (a1-7 none)
    (a2-0 none)
    (a2-2 none)
    (a2-3 none)
    (a2-5 none)
    (a3-0 none)
    (a3-4 none)
    (t0-0 none)
    (t0-1 none)
    (t0-2 none)
    (t0-4 none)
    (t0-5 none)
    (t0-6 none)
    (t0-7 none)
    (t1-0 none)
    (t9-0 none)
    (t9-1 none)
    )
  (if a1-0
      (set! v1-0 (the-as symbol (l.wu (+ a1-0 24))))
      )
  (cond
    (v1-0
      (set! a1-1 (the-as none (l.wu v1-0)))
      (set! a1-2 (the-as none (l.w (+ a1-1 40))))
      (set! a1-3 (the-as none (sll a1-2 32)))
      )
    (else
      (set! a1-3 (the-as none 0))
      )
    )
  (.sllv v1-1 v1-0 r0)
  (set! v1-2 (the-as none (logior a1-3 v1-1)))
  (set! a2-0 (the-as none -1))
  (set! a1-4 (the-as none -1))
  (set! a3-0 (the-as none 0))
  (while (<.si a3-0 16)
    (if (begin
          (set! t0-0 (the-as none (sll a3-0 3)))
          (set! t0-1 (the-as none (+ t0-0 a0-0)))
          (set! t0-2 (the-as none (l.d (+ t0-1 748))))
          (= v1-2 t0-2)
          )
        (begin (set! a2-0 (the-as none a3-0)) (goto cfg-17))
        )
    (when (begin
            (and (begin
                   (set! t0-4 (the-as none (sll a3-0 3)))
                   (set! t0-5 (the-as none (+ t0-4 a0-0)))
                   (set! t0-6 (the-as none (l.d (+ t0-5 748))))
                   (not t0-6)
                   )
                 (begin (set! t1-0 (the-as none (+ a1-4 1))) (set! t0-7 (the-as none (zero? t1-0))))
                 )
            t0-7
            )
      (set! a1-4 (the-as none a3-0))
      (set! t0-9 (the-as none a1-4))
      )
    (set! a3-0 (the-as none (+ a3-0 1)))
    )
  (when (begin (label cfg-17) (set! a3-4 (the-as none -1)) (= a2-0 a3-4))
    (cond
      ((begin (set! a2-2 (the-as none -1)) (= a1-4 a2-2))
       (set! t9-0 (the-as none format))
       (set! a0-1 (the-as none #t))
       (set! a1-5 (the-as none L167))
       (set! a2-3 (the-as none 16))
       (call!)
       (set! a2-4 (the-as none v0-0))
       )
      (else
        (when (begin (set! a2-5 (the-as none -1)) (!= a1-4 a2-5))
          (set! a1-6 (the-as none (sll a1-4 3)))
          (set! a1-7 (the-as none (+ a1-6 a0-0)))
          (s.d! (+ a1-7 748) v1-2)
          (set! v1-3 (the-as none (l.wu (+ a0-0 -4))))
          (set! t9-1 (the-as none (l.wu (+ v1-3 60))))
          (call!)
          (set! a2-7 (the-as none v0-1))
          )
        )
      )
    )
  (set! v0-2 (the-as none 0))
  (ret-none)
  )

;; definition for method 18 of type hover-formation-control
;; ERROR: failed type prop at 1: Could not figure out load: (set! v1 (l.wu (+ a1 24)))
;; ERROR: Unsupported inline assembly instruction kind - [sllv v1, v1, r0]
(defmethod hover-formation-control-method-18 hover-formation-control ((a0-0 hover-formation-control) (a1-0 hover-formation-control))
  (local-vars
    (v0-0 none)
    (v0-1 none)
    (v1-0 symbol)
    (v1-1 none)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-7 none)
    (a1-1 none)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a2-0 none)
    (a2-1 none)
    (a2-2 none)
    (t9-0 none)
    )
  (if a1-0
      (set! v1-0 (the-as symbol (l.wu (+ a1-0 24))))
      )
  (cond
    (v1-0
      (set! a1-1 (the-as none (l.wu v1-0)))
      (set! a1-2 (the-as none (l.w (+ a1-1 40))))
      (set! a1-3 (the-as none (sll a1-2 32)))
      )
    (else
      (set! a1-3 (the-as none 0))
      )
    )
  (.sllv v1-1 v1-0 r0)
  (set! v1-2 (the-as none (logior a1-3 v1-1)))
  (set! a1-4 (the-as none 0))
  (while (<.si a1-4 16)
    (if (begin
          (set! a2-0 (the-as none (sll a1-4 3)))
          (set! a2-1 (the-as none (+ a2-0 a0-0)))
          (set! a2-2 (the-as none (l.d (+ a2-1 748))))
          (= v1-2 a2-2)
          )
        (begin
          (set! v1-3 (the-as none (sll a1-4 3)))
          (set! v1-4 (the-as none (+ v1-3 a0-0)))
          (s.d! (+ v1-4 748) #f)
          (set! v1-5 (the-as none (l.wu (+ a0-0 -4))))
          (set! t9-0 (the-as none (l.wu (+ v1-5 60))))
          (call!)
          (set! v1-6 (the-as none v0-0))
          (set! v1-7 (the-as none #t))
          (set! v1-8 (the-as none v1-7))
          (goto cfg-12)
          )
        )
    (set! a1-4 (the-as none (+ a1-4 1)))
    )
  (label cfg-12)
  (set! v0-1 (the-as none 0))
  (ret-none)
  )

;; definition for method 19 of type hover-formation-control
(defmethod hover-formation-control-method-19 hover-formation-control ((obj hover-formation-control) (arg0 uint))
  (when (!= (-> obj formation-type) arg0)
    (set! (-> obj formation-type) arg0)
    (hover-formation-control-method-11 obj)
    )
  0
  )

;; definition for method 0 of type hover-formation-control
;; INFO: Used lq/sq
;; ERROR: failed type prop at 20: Could not figure out load: (set! a0 (l.q s5))
;; WARN: Return type mismatch none vs hover-formation-control.
(defmethod new hover-formation-control ((a0-0 symbol)
                                      (a1-0 type)
                                      (a2-0 object)
                                      (a3-0 object)
                                      (t0-0 object)
                                      (t1-0 object)
                                      (t2-0 object)
                                      (t3-0 object)
                                      )
  (local-vars
    (v0-0 hover-formation-control)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v1-0 type)
    (v1-1 type)
    (v1-2 vector)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-6 none)
    (v1-8 none)
    (v1-9 none)
    (v1-10 none)
    (v1-13 none)
    (v1-14 none)
    (v1-16 none)
    (a0-1 none)
    (a0-2 none)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-7 none)
    (a0-8 none)
    (a0-10 none)
    (a0-11 none)
    (a0-12 none)
    (a0-13 none)
    (a0-14 none)
    (a0-15 none)
    (a0-16 none)
    (a0-17 none)
    (a0-18 none)
    (a0-19 none)
    (a1-1 type)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-6 none)
    (a2-1 uint)
    (a2-2 none)
    (a2-3 none)
    (a3-1 none)
    (a3-2 none)
    (t0-1 none)
    (t0-2 none)
    (t2-1 none)
    (t2-2 none)
    (t9-0 function)
    (t9-1 none)
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (gp-0 hover-formation-control)
    (f0-0 object)
    (f0-1 object)
    (f0-2 none)
    )
  (when (begin
          (when (begin
                  (set! v1-0 object)
                  (set! t9-0 (method-of-type v1-0 new))
                  (set! v1-1 a1-0)
                  (set! a2-1 (-> a1-0 size))
                  (set! a1-1 v1-1)
                  (set! v0-0 (call! a0-0 a1-1 a2-1))
                  (set! gp-0 v0-0)
                  (set! (-> gp-0 entity) (the-as basic a3-0))
                  (set! (-> gp-0 anchor-proc) (the-as uint t3-0))
                  (set! (-> gp-0 flags) (the-as uint 0))
                  (set! f0-0 (gpr->fpr t0-0))
                  (set! (-> gp-0 notice-dist) (the-as float f0-0))
                  (set! f0-1 (gpr->fpr t2-0))
                  (set! (-> gp-0 rotation-inc) (the-as float f0-1))
                  (set! v1-2 (-> gp-0 offset))
                  (set! a0-1 (the-as none (l.q t1-0)))
                  (set! (-> v1-2 quad) (the-as uint128 a0-1))
                  (set! v1-3 (the-as none (-> gp-0 center)))
                  (set! a0-2 (the-as none (-> gp-0 entity)))
                  (set! a0-3 (the-as none (l.wu (+ a0-2 20))))
                  (set! a0-4 (the-as none (+ a0-3 32)))
                  (set! a0-5 (the-as none (l.q a0-4)))
                  (s.q! v1-3 a0-5)
                  (set! t9-1 (the-as none quaternion-copy!))
                  (set! a0-6 (the-as none (-> gp-0 focus-quat)))
                  (set! a1-2 (the-as none *unity-quaternion*))
                  (call!)
                  (set! v1-4 (the-as none res-lump))
                  (set! t9-2 (the-as none (l.wu (+ v1-4 60))))
                  (set! a0-7 (the-as none (-> gp-0 entity)))
                  (set! a1-3 (the-as none 'options))
                  (set! a2-2 (the-as none 'interp))
                  (set! a3-1 (the-as none -831624408))
                  (set! t0-1 (the-as none 0))
                  (set! t2-1 (the-as none *res-static-buf*))
                  (set! v0-2 (the-as none (call!)))
                  (set! v1-5 (the-as none v0-2))
                  (set! a0-8 (the-as none (logand v1-5 256)))
                  (nonzero? a0-8)
                  )
            (set! a0-10 (the-as none (l.hu (+ gp-0 876))))
            (set! a0-11 (the-as none (logior a0-10 1)))
            (s.h! (+ gp-0 876) a0-11)
            )
          (set! a0-12 (the-as none #x20000))
          (set! v1-6 (the-as none (logand a0-12 v1-5)))
          (nonzero? v1-6)
          )
    (set! v1-8 (the-as none (l.hu (+ gp-0 876))))
    (set! v1-9 (the-as none (logior v1-8 2)))
    (s.h! (+ gp-0 876) v1-9)
    )
  (set! v1-10 (the-as none 0))
  (while (<.si v1-10 16)
    (set! a0-13 (the-as none (sll v1-10 3)))
    (set! a0-14 (the-as none (+ a0-13 gp-0)))
    (s.d! (+ a0-14 748) #f)
    (set! v1-10 (the-as none (+ v1-10 1)))
    )
  (set! v1-13 (the-as none res-lump))
  (set! t9-3 (the-as none (l.wu (+ v1-13 64))))
  (set! a0-15 (the-as none (l.wu (+ gp-0 736))))
  (set! a1-4 (the-as none 'rotoffset))
  (set! a2-3 (the-as none 'interp))
  (set! a3-2 (the-as none -831624408))
  (set! t0-2 (the-as none 0))
  (set! t2-2 (the-as none *res-static-buf*))
  (set! v0-3 (the-as none (call!)))
  (set! f0-2 (the-as none (gpr->fpr v0-3)))
  (set! t9-4 (the-as none matrix-rotate-y!))
  (set! a0-16 (the-as none (+ gp-0 908)))
  (set! a1-5 (the-as none (fpr->gpr f0-2)))
  (call!)
  (set! v1-14 (the-as none (+ gp-0 956)))
  (set! a0-17 (the-as none (+ gp-0 892)))
  (set! a0-18 (the-as none (l.q a0-17)))
  (s.q! v1-14 a0-18)
  (set! t9-5 (the-as none matrix-inverse-of-rot-trans!))
  (set! a0-19 (the-as none (+ gp-0 972)))
  (set! a1-6 (the-as none (+ gp-0 908)))
  (call!)
  (set! v1-15 (the-as none v0-5))
  (set! v1-16 (the-as none 3))
  (s.d! (+ gp-0 884) v1-16)
  (set! v0-6 (the-as none gp-0))
  (ret-value v0-6)
  )

;; failed to figure out what this is:
(defstate idle (hover-formation)
  :virtual #t
  :event L15
  :code (the-as (function none :behavior hover-formation) sleep-code)
  :post L8
  )

;; definition for method 7 of type hover-formation
;; WARN: Return type mismatch function vs none.
(defmethod relocate hover-formation ((obj hover-formation) (arg0 int))
  (if (nonzero? (-> obj formation))
      (&+! (-> obj formation) arg0)
      )
  (if (nonzero? (-> obj path))
      (&+! (-> obj path) arg0)
      )
  ((find-parent-method hover-formation 7) (the-as type obj) arg0)
  (none)
  )

;; definition for method 15 of type hover-formation
(defmethod hover-formation-method-15 hover-formation ()
  0
  )

;; definition for method 11 of type hover-formation
;; INFO: Used lq/sq
;; ERROR: failed type prop at 13: Could not figure out load: (set! v1 (l.wu v1))
(defmethod init-from-entity! hover-formation ((a0-0 hover-formation) (a1-0 entity-actor))
  (local-vars
    (v0-0 path-control)
    (v0-1 none)
    (v0-2 none)
    (v0-3 none)
    (v0-4 none)
    (v0-5 none)
    (v0-6 none)
    (v0-7 none)
    (v0-8 none)
    (v1-0 type)
    (v1-1 basic)
    (v1-2 none)
    (v1-3 none)
    (v1-4 none)
    (v1-5 none)
    (v1-6 none)
    (v1-7 none)
    (v1-8 none)
    (v1-9 none)
    (v1-10 none)
    (v1-11 none)
    (v1-12 none)
    (v1-13 none)
    (v1-14 none)
    (v1-15 none)
    (v1-16 none)
    (v1-17 none)
    (a0-1 symbol)
    (a0-2 none)
    (a0-3 none)
    (a0-4 none)
    (a0-5 none)
    (a0-6 none)
    (a0-8 none)
    (a0-10 none)
    (a1-1 type)
    (a1-2 none)
    (a1-3 none)
    (a1-4 none)
    (a1-5 none)
    (a1-7 none)
    (a2-0 hover-formation)
    (a2-1 none)
    (a2-2 none)
    (a2-3 none)
    (a2-4 none)
    (a2-6 none)
    (a3-0 symbol)
    (a3-1 none)
    (a3-2 none)
    (a3-3 none)
    (t0-0 float)
    (t0-1 none)
    (t0-2 none)
    (t0-3 none)
    (t1-0 entity-actor)
    (t1-4 none)
    (t2-0 symbol)
    (t2-1 none)
    (t2-2 none)
    (t2-3 none)
    (s1-0 none)
    (s2-0 none)
    (s3-0 none)
    (s4-0 none)
    (s5-0 none)
    (t9-0 (function symbol type process symbol float entity symbol path-control))
    (t9-1 none)
    (t9-2 none)
    (t9-3 none)
    (t9-4 none)
    (t9-5 none)
    (t9-6 none)
    (t9-7 none)
    (t9-8 none)
    (sp-0 none)
    (f0-0 none)
    (f0-1 none)
    (f0-2 none)
    (f0-3 none)
    (sv-32 none)
    )
  (with-pp
    (if (begin
          (set! v1-0 path-control)
          (set! t9-0 (method-of-type v1-0 new))
          (set! a0-1 'process)
          (set! a1-1 path-control)
          (set! a2-0 a0-0)
          (set! a3-0 'path)
          (set! t0-0 (the-as float 0))
          (set! t1-0 (-> a0-0 entity))
          (set! t2-0 #f)
          (set! v0-0 (call! a0-1 a1-1 a2-0 a3-0 t0-0 t1-0 t2-0))
          (set! (-> a0-0 path) v0-0)
          (set! v1-1 (-> a0-0 path))
          (set! v1-2 (the-as none (l.wu v1-1)))
          (set! v1-3 (the-as none (logior v1-2 15)))
          (set! a0-2 (the-as none (-> a0-0 path)))
          (s.w! a0-2 v1-3)
          (set! v1-4 (the-as none hover-formation-control))
          (set! s5-0 (the-as none (l.wu (+ v1-4 16))))
          (set! s4-0 (the-as none 'process))
          (set! s3-0 (the-as none hover-formation-control))
          (set! s2-0 (the-as none a0-0))
          (set! t9-1 (the-as none entity-actor-lookup))
          (set! a0-3 (the-as none (-> a0-0 entity)))
          (set! a1-2 (the-as none 'alt-actor))
          (set! a2-1 (the-as none 0))
          (set! v0-1 (the-as none (call!)))
          v0-1
          )
        (set! s1-0 (the-as none v0-1))
        (set! s1-0 (the-as none (l.wu (+ a0-0 52))))
        )
    (set! v1-5 (the-as none res-lump))
    (set! t9-2 (the-as none (l.wu (+ v1-5 64))))
    (set! a0-4 (the-as none (l.wu (+ a0-0 52))))
    (set! a1-3 (the-as none 'notice-dist))
    (set! a2-2 (the-as none 'interp))
    (set! a3-1 (the-as none -831624408))
    (set! t0-1 (the-as none #x485c0000))
    (set! t2-1 (the-as none *res-static-buf*))
    (set! v0-2 (the-as none (call!)))
    (set! s0-0 (the-as none v0-2))
    (set! v1-6 (the-as none res-lump))
    (set! t9-3 (the-as none (l.wu (+ v1-6 56))))
    (set! a0-5 (the-as none (l.wu (+ a0-0 52))))
    (set! a1-4 (the-as none 'trans-offset))
    (set! a2-3 (the-as none 'interp))
    (set! a3-2 (the-as none -831624408))
    (set! t0-2 (the-as none (+ sp-0 16)))
    (set! f0-0 (the-as none 0))
    (s.f! t0-2 f0-0)
    (set! v1-7 (the-as none #x46a00000))
    (set! f0-1 (the-as none (gpr->fpr v1-7)))
    (s.f! (+ t0-2 4) f0-1)
    (set! v1-8 (the-as none #x47700000))
    (set! f0-2 (the-as none (gpr->fpr v1-8)))
    (s.f! (+ t0-2 8) f0-2)
    (set! v1-9 (the-as none #x3f800000))
    (set! f0-3 (the-as none (gpr->fpr v1-9)))
    (s.f! (+ t0-2 12) f0-3)
    (set! t2-2 (the-as none *res-static-buf*))
    (set! v0-3 (the-as none (call!)))
    (set! sv-32 v0-3)
    (set! v1-10 (the-as none res-lump))
    (set! t9-4 (the-as none (l.wu (+ v1-10 64))))
    (set! a0-6 (the-as none (l.wu (+ a0-0 52))))
    (set! a1-5 (the-as none 'rotoffset))
    (set! a2-4 (the-as none 'interp))
    (set! a3-3 (the-as none -831624408))
    (set! t0-3 (the-as none #x45aaaaab))
    (set! t2-3 (the-as none *res-static-buf*))
    (call!)
    (set! t2-4 (the-as none v0-4))
    (set! t9-5 (the-as none s5-0))
    (set! a0-7 (the-as none s4-0))
    (set! a1-6 (the-as none s3-0))
    (set! a2-5 (the-as none s2-0))
    (set! a3-4 (the-as none s1-0))
    (set! t0-4 (the-as none s0-0))
    (set! t1-4 sv-32)
    (set! v0-5 (the-as none (call!)))
    (s.w! (+ a0-0 124) v0-5)
    (set! v1-11 (the-as none (l.wu (+ s6-0 8))))
    (set! v1-12 (the-as none (l.d (+ v1-11 20))))
    (s.d! (+ a0-0 132) v1-12)
    (set! v1-13 (the-as none -33))
    (set! a0-8 (the-as none (l.wu (+ a0-0 4))))
    (set! v1-14 (the-as none (logand v1-13 a0-8)))
    (s.w! (+ a0-0 4) v1-14)
    (set! t9-6 (the-as none process-entity-status!))
    (set! a0-9 (the-as none a0-0))
    (set! a1-7 (the-as none 8))
    (set! a2-6 (the-as none #t))
    (call!)
    (set! a0-10 (the-as none a0-0))
    (set! v1-15 (the-as none (l.wu (+ a0-10 -4))))
    (set! t9-7 (the-as none (l.wu (+ v1-15 76))))
    (call!)
    (set! t9-8 (the-as none enter-state))
    (set! v1-16 (the-as none (l.wu (+ a0-0 -4))))
    (set! v1-17 (the-as none (l.wu (+ v1-16 72))))
    (s.w! (+ s6-0 64) v1-17)
    (call!)
    (ret-none)
    )
  )
